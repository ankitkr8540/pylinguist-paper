English_code,claude_translated_code,claude_partial_back_translated_code
"def reverse_matrix(matrix):
    new_matrix = []
    for i in range(len(matrix)):
        new_matrix.append([])
        for j in range(len(matrix[i])):
            new_matrix[i].insert(0, matrix[i][j])
    return new_matrix


# Test case 1
matrix1 = [[1, 2, 3],
           [4, 5, 6],
           [7, 8, 9]]
# Expected output: [[9, 8, 7], [6, 5, 4], [3, 2, 1]]
print(reverse_matrix(matrix1))

# Test case 2
matrix2 = [[1, 2, 3, 4],
           [5, 6, 7, 8]]
# Expected output: [[8, 7, 6, 5], [4, 3, 2, 1]]
print(reverse_matrix(matrix2))

# Test case 3
matrix3 = [[1, 2],
           [3, 4],
           [5, 6]]
# Expected output: [[6, 5], [4, 3], [2, 1]]
print(reverse_matrix(matrix3))","def inverser_matrice(matrice):
    nouvelle_matrice = []
    pour i dans range(len(matrice)):
        nouvelle_matrice.append([])
        pour j dans range(len(matrice[i])):
            nouvelle_matrice[i].insert(0, matrice[i][j])
    return nouvelle_matrice

# Cas de test 1
matrice1 = [[1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]]
# Résultat attendu : [[9, 8, 7], [6, 5, 4], [3, 2, 1]]
print(inverser_matrice(matrice1))

# Cas de test 2
matrice2 = [[1, 2, 3, 4],
            [5, 6, 7, 8]]
# Résultat attendu : [[8, 7, 6, 5], [4, 3, 2, 1]]
print(inverser_matrice(matrice2))

# Cas de test 3
matrice3 = [[1, 2],
            [3, 4],
            [5, 6]]
# Résultat attendu : [[6, 5], [4, 3], [2, 1]]
print(inverser_matrice(matrice3))","définir inverser_matrice(matrice):
    nouvelle_matrice = []
    for i in Portée(longueur(matrice)):
        nouvelle_matrice.ajouter([])
        for j in Portée(longueur(matrice[i])):
            nouvelle_matrice[i].insérer(0, matrice[i][j])
    retour nouvelle_matrice

 #Cas de test 1
matrice1 = [[1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]]
 #Résultat attendu : [[9, 8, 7], [6, 5, 4], [3, 2, 1]]
imprimer(inverser_matrice(matrice1))

 #Cas de test 2
matrice2 = [[1, 2, 3, 4],
            [5, 6, 7, 8]]
 #Résultat attendu : [[8, 7, 6, 5], [4, 3, 2, 1]]
imprimer(inverser_matrice(matrice2))

 #Cas de test 3
matrice3 = [[1, 2],
            [3, 4],
            [5, 6]]
 #Résultat attendu : [[6, 5], [4, 3], [2, 1]]
imprimer(inverser_matrice(matrice3))"
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

# Example usage
n = 10
fibonacci_number = fibonacci(n)
print(f""The Fibonacci number at index {n} is {fibonacci_number}."")","def fibonacci(n):
    si n == 0:
        retour 0
    sinon_si n == 1:
        retour 1
    autre:
        retour fibonacci(n-1) + fibonacci(n-2)

# Exemple d'utilisation
n = 10
nombre_fibonacci = fibonacci(n)
imprimer(f""Le nombre de Fibonacci à l'index {n} est {nombre_fibonacci}."")","définir fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

 #Exemple d'utilisation
n = 10
nombre_fibonacci = fibonacci(n)
print(f""Le nombre de Fibonacci à l'index {n} est {nombre_fibonacci}."")"
"def count_unique_consonants(string):
    consonants = set()
    lowercase_string = string.lower()
    for char in lowercase_string:
        if char.isalpha() and char not in 'aeiou':
            consonants.add(char)
    return len(consonants)","def compter_consonnes_uniques(chaine):
    consonnes = set()
    chaine_minuscules = chaine.lower()
    for caractere dans chaine_minuscules:
        si caractere.isalpha() et caractere pas dans 'aeiou':
            consonnes.add(caractere)
    return len(consonnes)","définir compter_consonnes_uniques(chaine):
    consonnes = ensemble()
    chaine_minuscules = chaine.plus_bas()
    pour caractere in chaine_minuscules:
        if caractere.est_alphabétique() and caractere not in 'aeiou':
            consonnes.ajouter(caractere)
    retour longueur(consonnes)"
"def filter_and_replace(string):
    vowels = ['a', 'e', 'i', 'o', 'u']
    filtered_words = []
    
    words = string.split()
    
    for word in words:
        if any(char.isdigit() or not char.isalpha() for char in word):
            continue
        
        if len(word) > 3 and any(char in vowels for char in word):
            filtered_word = """"
            for char in word:
                if char in vowels:
                    vowel_index = vowels.index(char)
                    next_vowel = vowels[(vowel_index + 1) % len(vowels)]
                    filtered_word += next_vowel
                else:
                    filtered_word += char
            filtered_words.append(filtered_word)
    
    return "" "".join(filtered_words)


# Example usage:
input_string = ""Hello world! This is a test string. Filter me out if I contain numbers or special characters.""
output_string = filter_and_replace(input_string)
print(output_string)","def filtrer_et_remplacer(chaine):
    voyelles = ['a', 'e', 'i', 'o', 'u']
    mots_filtres = []
    
    mots = chaine.split()
    
    pour mot dans mots:
        si quelconque(caractere.est_un_chiffre() ou pas caractere.est_alphabetique() pour caractere dans mot):
            continuer
        
        si longueur(mot) > 3 et quelconque(caractere dans voyelles pour caractere dans mot):
            mot_filtre = """"
            pour caractere dans mot:
                si caractere dans voyelles:
                    indice_voyelle = voyelles.index(caractere)
                    prochaine_voyelle = voyelles[(indice_voyelle + 1) % longueur(voyelles)]
                    mot_filtre += prochaine_voyelle
                autre:
                    mot_filtre += caractere
            mots_filtres.append(mot_filtre)
    
    return "" "".join(mots_filtres)

# Exemple d'utilisation
chaine_entree = ""Hello world! This is a test string. Filter me out if I contain numbers or special characters.""
chaine_sortie = filtrer_et_remplacer(chaine_entree)
print(chaine_sortie)","définir filtrer_et_remplacer(chaine):
    voyelles = ['a', 'e', 'i', 'o', 'u']
    mots_filtres = []
    
    mots = chaine.diviser()
    
    for mot in mots:
        if any(caractere.isdigit() ou not caractere.est_alphabetique() for caractere in mot):
            continuer
        
        if len(mot) > 3 and any(caractere in voyelles for caractere in mot):
            mot_filtre = """"
            for caractere in mot:
                if caractere in voyelles:
                    indice_voyelle = voyelles.indice(caractere)
                    prochaine_voyelle = voyelles[(indice_voyelle + 1) % len(voyelles)]
                    mot_filtre += prochaine_voyelle
                else:
                    mot_filtre += caractere
            mots_filtres.ajouter(mot_filtre)
    
    retour "" "".rejoindre(mots_filtres)

 #Exemple d'utilisation
chaine_entree = ""Hello world! This is a test string. Filter me out if I contain numbers or special characters.""
chaine_sortie = filtrer_et_remplacer(chaine_entree)
imprimer(chaine_sortie)"
"def isOddPrimeGreaterThan100(number):
    if number <= 100 or number % 2 == 0:  # Check if number is less than or equal to 100 or even
        return False
    for i in range(3, int(number**0.5) + 1, 2):  # Check divisibility by odd numbers only
        if number % i == 0:
            return False
    return True

def findSecondSmallestOddPrimeGreaterThan100(array):
    smallest = secondSmallest = float('inf')
    for number in array:
        if isOddPrimeGreaterThan100(number):
            if number < smallest:
                secondSmallest = smallest
                smallest = number
            elif number < secondSmallest:
                secondSmallest = number
    return secondSmallest","définir est_nombre_premier_impair_superieur_a_100(nombre):
    si nombre <= 100 ou_alors nombre % 2 == 0: #Vérifier si le nombre est inférieur ou égal à 100 ou pair
        retour Faux
    pour i dans portée(3, entier(nombre**0.5) + 1, 2): #Vérifier la divisibilité uniquement par des nombres impairs
        si nombre % i == 0:
            retour Faux
    retour Vrai

définir trouver_deuxieme_plus_petit_nombre_premier_impair_superieur_a_100(tableau):
    plus_petit = deuxieme_plus_petit = virgule_flottante('inf')
    pour nombre dans tableau:
        si est_nombre_premier_impair_superieur_a_100(nombre):
            si nombre < plus_petit:
                deuxieme_plus_petit = plus_petit
                plus_petit = nombre
            sinon_si nombre < deuxieme_plus_petit:
                deuxieme_plus_petit = nombre
    retour deuxieme_plus_petit","def est_nombre_premier_impair_superieur_a_100(nombre):
    if nombre <= 100 or nombre % 2 == 0: #Vérifier si le nombre est inférieur ou égal à 100 ou pair
        return False
    for i in portée(3, int(nombre**0.5) + 1, 2): #Vérifier la divisibilité uniquement par des nombres impairs
        if nombre % i == 0:
            return False
    return True

def trouver_deuxieme_plus_petit_nombre_premier_impair_superieur_a_100(tableau):
    plus_petit = deuxieme_plus_petit = virgule_flottante('inf')
    for nombre in tableau:
        if est_nombre_premier_impair_superieur_a_100(nombre):
            if nombre < plus_petit:
                deuxieme_plus_petit = plus_petit
                plus_petit = nombre
            elif nombre < deuxieme_plus_petit:
                deuxieme_plus_petit = nombre
    return deuxieme_plus_petit"
"class SeparatorNotFoundError(Exception):
    pass

class MultipleSeparatorsError(Exception):
    pass

try:
    mystring = ""Hello, World!""
    separator = ""#""

    # Incorrect way to split the string on a separator
    split_string = mystring.split(separator, 1)
    if not split_string:
        raise SeparatorNotFoundError(""Separator not found in string"")

    # Additional Requirement:
    # If the separator is found more than once in the string, raise a custom exception called ""MultipleSeparatorsError""

    # Incorrect way to split the string on a separator
    split_string = mystring.split(separator)
    if len(split_string) > 2:
        raise MultipleSeparatorsError(""Multiple separators found in string"")

except SeparatorNotFoundError as e:
    print(""Error:"", e)

except MultipleSeparatorsError as e:
    print(""Error:"", e)

except Exception as e:
    print(""Error:"", e)","classe ErreurSeparateur_Non_Trouve(Exception):
    passer

classe ErreurPlusieurs_Separateurs(Exception):
    passer

essayer:
    ma_chaine = ""Bonjour, Monde!""
    separateur = ""#""

     #Méthode incorrecte pour diviser la chaîne sur un séparateur
    chaine_divisee = ma_chaine.diviser(separateur, 1)
    si pas chaine_divisee:
        lever_une_exception ErreurSeparateur_Non_Trouve(""Séparateur non trouvé dans la chaîne"")

     #Exigence supplémentaire :
     #Si le séparateur est trouvé plus d'une fois dans la chaîne, lever une exception personnalisée appelée ""ErreurPlusieurs_Separateurs""

     #Méthode incorrecte pour diviser la chaîne sur un séparateur
    chaine_divisee = ma_chaine.diviser(separateur)
    si longueur(chaine_divisee) > 2:
        lever_une_exception ErreurPlusieurs_Separateurs(""Plusieurs séparateurs trouvés dans la chaîne"")

sauf ErreurSeparateur_Non_Trouve a e:
    imprimer(""Erreur:"", e)

sauf ErreurPlusieurs_Separateurs a e:
    imprimer(""Erreur:"", e)

sauf Exception a e:
    imprimer(""Erreur:"", e)","class ErreurSeparateur_Non_Trouve(Exception):
    pass

class ErreurPlusieurs_Separateurs(Exception):
    pass

try:
    ma_chaine = ""Bonjour, Monde!""
    separateur = ""#""

      #Méthode incorrecte pour diviser la chaîne sur un séparateur
    chaine_divisee = ma_chaine.split(separateur, 1)
    if not chaine_divisee:
        raise ErreurSeparateur_Non_Trouve(""Séparateur non trouvé dans la chaîne"")

      #Exigence supplémentaire :
      #Si le séparateur est trouvé plus d'une fois dans la chaîne, lever une exception personnalisée appelée ""ErreurPlusieurs_Separateurs""

      #Méthode incorrecte pour diviser la chaîne sur un séparateur
    chaine_divisee = ma_chaine.split(separateur)
    if len(chaine_divisee) > 2:
        raise ErreurPlusieurs_Separateurs(""Plusieurs séparateurs trouvés dans la chaîne"")

except ErreurSeparateur_Non_Trouve as e:
    print(""Erreur:"", e)

except ErreurPlusieurs_Separateurs as e:
    print(""Erreur:"", e)

except Exception as e:
    print(""Erreur:"", e)"
"def create_index_dictionary(list_one, list_two):
    if len(list_one) != len(list_two):
        raise ValueError(""Input lists must be of equal length"")
    
    index_dict = {}
    for i in range(len(list_one)):
        if isinstance(list_one[i], (list, dict, tuple)) and isinstance(list_two[i], (list, dict, tuple)):
            if isinstance(list_one[i], set) or isinstance(list_two[i], set):
                raise ValueError(""Input lists cannot contain sets"")
            
            nested_dict = {}
            if isinstance(list_one[i], dict) and isinstance(list_two[i], dict):
                if len(list_one[i]) != len(list_two[i]):
                    raise ValueError(""Nested dictionaries must have the same number of elements"")
                
                for key in list_one[i].keys():
                    if key not in list_two[i]:
                        raise ValueError(""Keys in nested dictionaries must be the same"")
                    nested_dict[key] = (list_one[i][key], list_two[i][key])
            elif isinstance(list_one[i], list) and isinstance(list_two[i], list):
                if len(list_one[i]) != len(list_two[i]):
                    raise ValueError(""Nested lists must have the same length"")
                
                for j in range(len(list_one[i])):
                    nested_dict[j] = (list_one[i][j], list_two[i][j])
            elif isinstance(list_one[i], tuple) and isinstance(list_two[i], tuple):
                if len(list_one[i]) != len(list_two[i]):
                    raise ValueError(""Tuples must have the same length"")
                
                for j in range(len(list_one[i])):
                    nested_dict[j] = (list_one[i][j], list_two[i][j])
            
            index_dict[i] = nested_dict
        else:
            index_dict[i] = (list_one[i], list_two[i])
    
    return index_dict","définir creer_dictionnaire_index(liste_un, liste_deux):
    si longueur(liste_un) != longueur(liste_deux):
        lever_une_exception Erreur_de_valeur(""Les listes d'entrée doivent avoir la même longueur"")
    
    dictionnaire_index = {}
    pour i dans Portée(longueur(liste_un)):
        si instance(liste_un[i], (liste, dictionnaire, tuple)) et instance(liste_deux[i], (liste, dictionnaire, tuple)):
            si instance(liste_un[i], ensemble) ou_alors instance(liste_deux[i], ensemble):
                lever_une_exception Erreur_de_valeur(""Les listes d'entrée ne peuvent pas contenir des ensembles"")
            
            dictionnaire_imbrique = {}
            si instance(liste_un[i], dictionnaire) et instance(liste_deux[i], dictionnaire):
                si longueur(liste_un[i]) != longueur(liste_deux[i]):
                    lever_une_exception Erreur_de_valeur(""Les dictionnaires imbriqués doivent avoir le même nombre d'éléments"")
                
                pour cle dans liste_un[i].clés():
                    si cle pas dans liste_deux[i]:
                        lever_une_exception Erreur_de_valeur(""Les clés dans les dictionnaires imbriqués doivent être les mêmes"")
                    dictionnaire_imbrique[cle] = (liste_un[i][cle], liste_deux[i][cle])
            sinon_si instance(liste_un[i], liste) et instance(liste_deux[i], liste):
                si longueur(liste_un[i]) != longueur(liste_deux[i]):
                    lever_une_exception Erreur_de_valeur(""Les listes imbriquées doivent avoir la même longueur"")
                
                pour j dans Portée(longueur(liste_un[i])):
                    dictionnaire_imbrique[j] = (liste_un[i][j], liste_deux[i][j])
            sinon_si instance(liste_un[i], tuple) et instance(liste_deux[i], tuple):
                si longueur(liste_un[i]) != longueur(liste_deux[i]):
                    lever_une_exception Erreur_de_valeur(""Les tuples doivent avoir la même longueur"")
                
                pour j dans Portée(longueur(liste_un[i])):
                    dictionnaire_imbrique[j] = (liste_un[i][j], liste_deux[i][j])
            
            dictionnaire_index[i] = dictionnaire_imbrique
        autre:
            dictionnaire_index[i] = (liste_un[i], liste_deux[i])
    
    retour dictionnaire_index","def creer_dictionnaire_index(liste_un, liste_deux):
    if len(liste_un) != len(liste_deux):
        raise ValueError(""Les listes d'entrée doivent avoir la même longueur"")
    
    dictionnaire_index = {}
    for i in range(len(liste_un)):
        if isinstance(liste_un[i], (list, dict, tuple)) and isinstance(liste_deux[i], (list, dict, tuple)):
            if isinstance(liste_un[i], set) or isinstance(liste_deux[i], set):
                raise ValueError(""Les listes d'entrée ne peuvent pas contenir des ensembles"")
            
            dictionnaire_imbrique = {}
            if isinstance(liste_un[i], dict) and isinstance(liste_deux[i], dict):
                if len(liste_un[i]) != len(liste_deux[i]):
                    raise ValueError(""Les dictionnaires imbriqués doivent avoir le même nombre d'éléments"")
                
                for cle in liste_un[i].keys():
                    if cle not in liste_deux[i]:
                        raise ValueError(""Les clés dans les dictionnaires imbriqués doivent être les mêmes"")
                    dictionnaire_imbrique[cle] = (liste_un[i][cle], liste_deux[i][cle])
            elif isinstance(liste_un[i], list) and isinstance(liste_deux[i], list):
                if len(liste_un[i]) != len(liste_deux[i]):
                    raise ValueError(""Les listes imbriquées doivent avoir la même longueur"")
                
                for j in range(len(liste_un[i])):
                    dictionnaire_imbrique[j] = (liste_un[i][j], liste_deux[i][j])
            elif isinstance(liste_un[i], tuple) and isinstance(liste_deux[i], tuple):
                if len(liste_un[i]) != len(liste_deux[i]):
                    raise ValueError(""Les tuples doivent avoir la même longueur"")
                
                for j in range(len(liste_un[i])):
                    dictionnaire_imbrique[j] = (liste_un[i][j], liste_deux[i][j])
            
            dictionnaire_index[i] = dictionnaire_imbrique
        else:
            dictionnaire_index[i] = (liste_un[i], liste_deux[i])
    
    return dictionnaire_index"
"def find_maximum(a, b, c):
    # Convert the numbers to binary
    a_bin = bin(a)
    b_bin = bin(b)
    c_bin = bin(c)
    
    # Count the number of 1s in the binary representation of each number
    a_count = a_bin.count('1')
    b_count = b_bin.count('1')
    c_count = c_bin.count('1')
    
    # Compare the counts to find the maximum
    if a_count > b_count and a_count > c_count:
        return a
    elif b_count > a_count and b_count > c_count:
        return b
    else:
        return c","def trouver_maximum(a, b, c):
    # Convertir les nombres en binaire
    a_bin = binaire(a)
    b_bin = binaire(b)
    c_bin = binaire(c)
    
    # Compter le nombre de 1 dans la représentation binaire de chaque nombre
    a_compte = a_bin.compter('1')
    b_compte = b_bin.compter('1')
    c_compte = c_bin.compter('1')
    
    # Comparer les comptes pour trouver le maximum
    si a_compte > b_compte et a_compte > c_compte:
        retour a
    sinon_si b_compte > a_compte et b_compte > c_compte:
        retour b
    autre:
        retour c","définir trouver_maximum(as, b, c):
     #Convertir les nombres en binaire
    a_bin = bin(as)
    b_bin = bin(b)
    c_bin = bin(c)
    
     #Compter le nombre de 1 dans la représentation binaire de chaque nombre
    a_compte = a_bin.count('1')
    b_compte = b_bin.count('1')
    c_compte = c_bin.count('1')
    
     #Comparer les comptes pour trouver le maximum
    if a_compte > b_compte and a_compte > c_compte:
        return as
    elif b_compte > a_compte and b_compte > c_compte:
        return b
    else:
        return c"
"def quick_sort(arr):
    if len(arr) <= 1:
        return arr, 0
    else:
        pivot = arr[0]
        less = [x for x in arr[1:] if x <= pivot]
        greater = [x for x in arr[1:] if x > pivot]
        sorted_less, comparisons_less = quick_sort(less)
        sorted_greater, comparisons_greater = quick_sort(greater)
        comparisons = len(arr) - 1 + comparisons_less + comparisons_greater
        sorted_arr = sorted_greater + [pivot] + sorted_less
        return sorted_arr, comparisons

# Testing the code
arr = [5, 3, 9, 5, 2, 8, 4]
sorted_arr, comparisons = quick_sort(arr)
print(""Sorted Array:"", sorted_arr)
print(""Number of Comparisons:"", comparisons)","def tri_rapide(tableau):
    si longueur(tableau) <= 1:
        retour tableau, 0
    autre:
        pivot = tableau[0]
        moins = [x pour x dans tableau[1:] si x <= pivot]
        plus_grand = [x pour x dans tableau[1:] si x > pivot]
        tri_moins, comparaisons_moins = tri_rapide(moins)
        tri_plus_grand, comparaisons_plus_grand = tri_rapide(plus_grand)
        comparaisons = longueur(tableau) - 1 + comparaisons_moins + comparaisons_plus_grand
        tableau_trie = tri_plus_grand + [pivot] + tri_moins
        retour tableau_trie, comparaisons

 #Test du code
tableau = [5, 3, 9, 5, 2, 8, 4]
tableau_trie, comparaisons = tri_rapide(tableau)
imprimer(""Tableau trié:"", tableau_trie)
imprimer(""Nombre de comparaisons:"", comparaisons)","définir tri_rapide(tableau):
    if len(tableau) <= 1:
        return tableau, 0
    else:
        pivot = tableau[0]
        moins = [x for x in tableau[1:] if x <= pivot]
        plus_grand = [x for x in tableau[1:] if x > pivot]
        tri_moins, comparaisons_moins = tri_rapide(moins)
        tri_plus_grand, comparaisons_plus_grand = tri_rapide(plus_grand)
        comparaisons = len(tableau) - 1 + comparaisons_moins + comparaisons_plus_grand
        tableau_trie = tri_plus_grand + [pivot] + tri_moins
        return tableau_trie, comparaisons

  #Test du code
tableau = [5, 3, 9, 5, 2, 8, 4]
tableau_trie, comparaisons = tri_rapide(tableau)
print(""Tableau trié:"", tableau_trie)
print(""Nombre de comparaisons:"", comparaisons)"
"def calculate_distance(point1, point2):
    distance = ((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2 + (point2[2] - point1[2])**2) ** 0.5
    return distance","def calculer_distance(point1, point2):
    distance = ((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2 + (point2[2] - point1[2])**2) ** 0.5
    return distance","définir calculer_distance(point1, point2):
    distance = ((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2 + (point2[2] - point1[2])**2) ** 0.5
    retour distance"

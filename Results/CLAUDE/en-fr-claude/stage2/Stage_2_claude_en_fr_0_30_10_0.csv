English_code,Partial_translated_code,google_translated_code
"for i in range(10):  # First digit
    for j in range(10):  # Second digit
        for k in range(10):  # Third digit
            # Checking for the conditions
            if i != 5 and j != 5 and k != 5 and i != j and i != k and j != k:
                print(i, j, k)","pour i dans Portée(10): #First digit
    pour j dans Portée(10): #Second digit
        pour k dans Portée(10): #Third digit
             #Checking for the conditions
            si i != 5 et j != 5 et k != 5 et i != j et i != k et j != k:
                imprimer(i, j, k)","verser je pavé Portée(10): # Premier chiffre
    verser J pavé Portée(10): # Deuxième chiffre
        verser k pavé Portée(10): # Troisième chiffre
              # Vérification des conditions
            si je != 5 ET J != 5 ET k != 5 ET je != J ET je != k ET J != k:
                imprimer(je, J, k)"
"def count_distinct_states(matrix):
    count = 0
    states = set()
    for row in matrix:
        for col in row:
            state = ''.join(col)
            if state not in states:
                count += 1
            states.add(state)
    return count

matrix = [['A', 'B', 'C'],
          ['A', 'B', 'D'],
          ['A', 'B', 'C']]
print(count_distinct_states(matrix))
# Output: 4","définir count_distinct_states(matrix):
    compter = 0
    states = ensemble()
    pour row dans matrix:
        pour col dans row:
            state = ''.rejoindre(col)
            si state pas dans states:
                compter += 1
            states.ajouter(state)
    retour compter

matrix = [['A', 'B', 'C'],
          ['A', 'B', 'D'],
          ['A', 'B', 'C']]
imprimer(count_distinct_states(matrix))
 #Output: 4","définir compter_les_états_distincts(matrice):
    compter = 0
    états = ensemble()
    verser rangée pavé matrice:
        verser col pavé rangée:
            État = ''.réjouissance(col)
            si État pas pavé états:
                compter += 1
            états.ajouter(État)
    remettre_à_une_revers compter

matrice = [['A', 'B', 'C'],
          ['A', 'B', 'D'],
          ['A', 'B', 'C']]
imprimer(compter_les_états_distincts(matrice))
  # Sortie: 4"
"def remove_spaces_and_punctuation(s):
    result = """"
    for char in s:
        if char.isalnum():
            result += char
    return result","définir remove_spaces_and_punctuation(s):
    result = """"
    pour char dans s:
        si char.est_alphanumérique():
            result += char
    retour result","définir supprimer_les_espaces_et_la_ponctuation(s):
    résultat = """"
    verser carboniser pavé s:
        si carboniser.est_alphanumérique():
            résultat += carboniser
    remettre_à_une_revers résultat"
"import math

def is_prime(n):
    # Check if the number is less than 2 or not an integer
    if n < 2 or not isinstance(n, int):
        return ""Not Prime""

    # Check if the number is divisible by any integer from 2 to the square root of n
    for i in range(2, math.isqrt(n) + 1):
        if n % i == 0:
            return ""Not Prime""

    return ""Prime""","importer math

définir is_prime(n):
     #Check if the number is less than 2 or not an integer
    si n < 2 ou_alors pas instance(n, entier):
        retour ""Not Prime""

     #Check if the number is divisible by any integer from 2 to the square root of n
    pour i dans Portée(2, math.isqrt(n) + 1):
        si n % i == 0:
            retour ""Not Prime""

    retour ""Prime""","importateur mathématiques

définir est_premier(n):
      # Vérifiez si le nombre est inférieur à 2 ou non un entier
    si n < 2 ou_alors pas exemple(n, entier):
        remettre_à_une_revers ""Not Prime""

      # Vérifiez si le nombre est divisible par un entier de 2 à la racine carrée de n
    verser je pavé Portée(2, mathématiques.isqrt(n) + 1):
        si n % je == 0:
            remettre_à_une_revers ""Not Prime""

    remettre_à_une_revers ""Prime"""
"class String:
    def __init__(self, string):
        self.string = string

    def replace_odd_occurrences(self, substring, replace_with):
        count = self.string.count(substring)
        if count % 2 == 0 or count == 0:
            return self.string

        result = """"
        stack = []

        for i in range(len(self.string)):
            if self.string[i:i+len(substring)] == substring:
                if len(stack) > 0 and (stack[-1] == '(' or stack[-1] == '['):
                    stack.append(substring)
                    result += substring
                elif len(stack) > 0 and (stack[-1] == ')' or stack[-1] == ']'):
                    stack.pop()
                    result += substring
                else:
                    stack.append(substring)
                    result += replace_with
            else:
                result += self.string[i]

            if len(stack) > 0 and stack[-1] == substring:
                stack.pop()

        return result","classe String:
    définir __init__(self, str):
        self.str = str

    définir replace_odd_occurrences(self, substring, replace_with):
        compter = self.str.compter(substring)
        si compter % 2 == 0 ou_alors compter == 0:
            retour self.str

        result = """"
        stack = []

        pour i dans Portée(longueur(self.str)):
            si self.str[i:i+longueur(substring)] == substring:
                si longueur(stack) > 0 et (stack[-1] == '(' ou_alors stack[-1] == '['):
                    stack.ajouter(substring)
                    result += substring
                sinon_si longueur(stack) > 0 et (stack[-1] == ')' ou_alors stack[-1] == ']'):
                    stack.enlever()
                    result += substring
                autre:
                    stack.ajouter(substring)
                    result += replace_with
            autre:
                result += self.str[i]

            si longueur(stack) > 0 et stack[-1] == substring:
                stack.enlever()

        retour result","arrosage Chaîne:
    définir __init__(self, Str):
        self.Str = Str

    définir Remplacer_les_événements_étranges(self, sous_chaîne, remplacer_par):
        compter = self.Str.compter(sous_chaîne)
        si compter % 2 == 0 ou_alors compter == 0:
            remettre_à_une_revers self.Str

        résultat = """"
        empiler = []

        verser je pavé Portée(longueur(self.Str)):
            si self.Str[je:je+longueur(sous_chaîne)] == sous_chaîne:
                si longueur(empiler) > 0 ET (empiler[-1] == '(' ou_alors empiler[-1] == '['):
                    empiler.ajouter(sous_chaîne)
                    résultat += sous_chaîne
                Sinon_Si longueur(empiler) > 0 ET (empiler[-1] == ')' ou_alors empiler[-1] == ']'):
                    empiler.émousser()
                    résultat += sous_chaîne
                auditeur:
                    empiler.ajouter(sous_chaîne)
                    résultat += remplacer_par
            auditeur:
                résultat += self.Str[je]

            si longueur(empiler) > 0 ET empiler[-1] == sous_chaîne:
                empiler.émousser()

        remettre_à_une_revers résultat"
"def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def has_digit_7(num):
    while num > 0:
        if num % 10 == 7:
            return True
        num //= 10
    return False

def sum_of_primes():
    sum_of_primes = 0
    for num in range(1000000, 2000001):
        if is_prime(num) and not has_digit_7(num):
            sum_of_primes += num
    return sum_of_primes

result = sum_of_primes()
print(""The sum of all prime numbers between 1 million and 2 million, excluding prime numbers that contain the digit 7, is:"", result)","définir is_prime(num):
    si num <= 1:
        retour Faux
    pour i dans Portée(2, entier(num**0.5) + 1):
        si num % i == 0:
            retour Faux
    retour Vrai

définir has_digit_7(num):
    tandis_que num > 0:
        si num % 10 == 7:
            retour Vrai
        num //= 10
    retour Faux

définir sum_of_primes():
    sum_of_primes = 0
    pour num dans Portée(1000000, 2000001):
        si is_prime(num) et pas has_digit_7(num):
            sum_of_primes += num
    retour sum_of_primes

result = sum_of_primes()
imprimer(""The sum of all prime numbers between 1 million and 2 million, excluding prime numbers that contain the digit 7, is:"", result)","définir est_premier(nobs):
    si nobs <= 1:
        remettre_à_une_revers Faux
    verser je pavé Portée(2, entier(nobs**0.5) + 1):
        si nobs % je == 0:
            remettre_à_une_revers Faux
    remettre_à_une_revers Vrai

définir a_le_chiffre_7(nobs):
    tandis_que nobs > 0:
        si nobs % 10 == 7:
            remettre_à_une_revers Vrai
        nobs //= 10
    remettre_à_une_revers Faux

définir somme_des_nombres_premiers():
    somme_des_nombres_premiers = 0
    verser nobs pavé Portée(1000000, 2000001):
        si est_premier(nobs) ET pas a_le_chiffre_7(nobs):
            somme_des_nombres_premiers += nobs
    remettre_à_une_revers somme_des_nombres_premiers

résultat = somme_des_nombres_premiers()
imprimer(""The sum of all prime numbers between 1 million and 2 million, excluding prime numbers that contain the digit 7, is:"", résultat)"
"def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True

def find_prime_sum_array(N, M, X):
    prime_sum_array = []
    current_number = M
    sum_so_far = 0

    while len(prime_sum_array) < N and current_number <= X:
        if is_prime(sum_so_far + current_number):
            prime_sum_array.append(current_number)
            sum_so_far += current_number
        current_number += M

    if not is_prime(sum_so_far):
        return []

    return prime_sum_array

# Example usage
N = 5
M = 3
X = 20

result = find_prime_sum_array(N, M, X)
print(result)","définir is_prime(num):
    si num < 2:
        retour Faux
    pour i dans Portée(2, entier(num ** 0.5) + 1):
        si num % i == 0:
            retour Faux
    retour Vrai

définir find_prime_sum_array(N, M, X):
    prime_sum_array = []
    current_number = M
    sum_so_far = 0

    tandis_que longueur(prime_sum_array) < N et current_number <= X:
        si is_prime(sum_so_far + current_number):
            prime_sum_array.ajouter(current_number)
            sum_so_far += current_number
        current_number += M

    si pas is_prime(sum_so_far):
        retour []

    retour prime_sum_array

 #Example usage
N = 5
M = 3
X = 20

result = find_prime_sum_array(N, M, X)
imprimer(result)","définir est_premier(nobs):
    si nobs < 2:
        remettre_à_une_revers Faux
    verser je pavé Portée(2, entier(nobs ** 0.5) + 1):
        si nobs % je == 0:
            remettre_à_une_revers Faux
    remettre_à_une_revers Vrai

définir Trouver_un_tableau_de_somme_Prime(N, M, X):
    Tableau_de_somme_privilégiée = []
    numéro_actuel = M
    Summer_jusqu'à_présent = 0

    tandis_que longueur(Tableau_de_somme_privilégiée) < N ET numéro_actuel <= X:
        si est_premier(Summer_jusqu'à_présent + numéro_actuel):
            Tableau_de_somme_privilégiée.ajouter(numéro_actuel)
            Summer_jusqu'à_présent += numéro_actuel
        numéro_actuel += M

    si pas est_premier(Summer_jusqu'à_présent):
        remettre_à_une_revers []

    remettre_à_une_revers Tableau_de_somme_privilégiée

  # Exemple d'utilisation
N = 5
M = 3
X = 20

résultat = Trouver_un_tableau_de_somme_Prime(N, M, X)
imprimer(résultat)"
"def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def max_prime_difference(arr):
    primes = []
    for num in arr:
        if is_prime(abs(num)):
            primes.append(abs(num))
    if len(primes) < 2:
        return 0
    max_diff = 0
    for i in range(len(primes)-1):
        diff = abs(primes[i] - primes[i+1])
        if diff > max_diff:
            max_diff = diff
    return max_diff","définir is_prime(n):
    si n < 2:
        retour Faux
    pour i dans Portée(2, entier(n**0.5) + 1):
        si n % i == 0:
            retour Faux
    retour Vrai

définir max_prime_difference(arr):
    primes = []
    pour num dans arr:
        si is_prime(valeur_absolue(num)):
            primes.ajouter(valeur_absolue(num))
    si longueur(primes) < 2:
        retour 0
    max_diff = 0
    pour i dans Portée(longueur(primes)-1):
        diff = valeur_absolue(primes[i] - primes[i+1])
        si diff > max_diff:
            max_diff = diff
    retour max_diff","définir est_premier(n):
    si n < 2:
        remettre_à_une_revers Faux
    verser je pavé Portée(2, entier(n**0.5) + 1):
        si n % je == 0:
            remettre_à_une_revers Faux
    remettre_à_une_revers Vrai

définir Différence_maximale(art):
    nombrer = []
    verser nobs pavé art:
        si est_premier(Valeur_Absolu(nobs)):
            nombrer.ajouter(Valeur_Absolu(nobs))
    si longueur(nombrer) < 2:
        remettre_à_une_revers 0
    Max_Diff = 0
    verser je pavé Portée(longueur(nombrer)-1):
        difficulté = Valeur_Absolu(nombrer[je] - nombrer[je+1])
        si difficulté > Max_Diff:
            Max_Diff = difficulté
    remettre_à_une_revers Max_Diff"
"import math

def calculate_triangle_height(angle, side_lengths, opposite_side_length, side_ratio):
    # Convert angle from degrees to radians
    angle_rad = math.radians(angle)

    # Calculate the height using the Law of Sines
    height = opposite_side_length * math.sin(angle_rad) / side_ratio

    # Calculate the length of the adjacent side using the Law of Cosines
    adjacent_side_length = math.sqrt(side_lengths**2 + opposite_side_length**2 - 2 * side_lengths * opposite_side_length * math.cos(angle_rad))

    # Calculate the hypotenuse of the triangle
    hypotenuse = side_lengths / math.cos(angle_rad)

    # Calculate the remaining side using Pythagorean theorem
    remaining_side_length = math.sqrt(hypotenuse**2 - adjacent_side_length**2)

    # Calculate the final height of the triangle
    height += remaining_side_length

    return height


def simulate_triangle_motion(initial_velocity, angle, time_interval, air_resistance=True):
    # Initialize variables
    x = 0.0
    y = 0.0
    time = 0.0

    # Convert angle from degrees to radians
    angle_rad = math.radians(angle)

    # Calculate initial velocities
    vx = initial_velocity * math.cos(angle_rad)
    vy = initial_velocity * math.sin(angle_rad)

    # Simulate the motion until the y-coordinate becomes negative (reached the ground)
    while y >= 0:
        # Calculate the acceleration due to air resistance
        if air_resistance:
            air_resistance_acceleration = -0.5 * vy**2  # Simplified model for air resistance
        else:
            air_resistance_acceleration = 0.0  # No air resistance

        # Calculate the new velocities using the kinematic equations
        vx += air_resistance_acceleration * math.cos(angle_rad) * time_interval
        vy += (-9.8 + air_resistance_acceleration * math.sin(angle_rad)) * time_interval

        # Calculate the new position using the kinematic equations
        x += vx * time_interval
        y += vy * time_interval

        # Increment the time
        time += time_interval

    return x, y, time


# Example usage
angle = 45  # Angle in degrees
side_lengths = 5
opposite_side_length = 3
side_ratio = 2
height = calculate_triangle_height(angle, side_lengths, opposite_side_length, side_ratio)
print(f""The height of the triangle is: {height}"")

initial_velocity = 10  # m/s
time_interval = 0.01  # seconds
x, y, total_time = simulate_triangle_motion(initial_velocity, angle, time_interval, air_resistance=True)
print(f""The triangle reached the ground at coordinates (x={x:.2f}m, y={y:.2f}m) in {total_time:.2f}s."")","importer math

définir calculate_triangle_height(angle, side_lengths, opposite_side_length, side_ratio):
     #Convert angle from degrees to radians
    angle_rad = math.radians(angle)

     #Calculate the height using the Law of Sines
    height = opposite_side_length * math.sin(angle_rad) / side_ratio

     #Calculate the length of the adjacent side using the Law of Cosines
    adjacent_side_length = math.sqrt(side_lengths**2 + opposite_side_length**2 - 2 * side_lengths * opposite_side_length * math.cos(angle_rad))

     #Calculate the hypotenuse of the triangle
    hypotenuse = side_lengths / math.cos(angle_rad)

     #Calculate the remaining side using Pythagorean theorem
    remaining_side_length = math.sqrt(hypotenuse**2 - adjacent_side_length**2)

     #Calculate the final height of the triangle
    height += remaining_side_length

    retour height


définir simulate_triangle_motion(initial_velocity, angle, time_interval, air_resistance=Vrai):
     #Initialize variables
    x = 0.0
    y = 0.0
    time = 0.0

     #Convert angle from degrees to radians
    angle_rad = math.radians(angle)

     #Calculate initial velocities
    vx = initial_velocity * math.cos(angle_rad)
    vy = initial_velocity * math.sin(angle_rad)

     #Simulate the motion until the y-coordinate becomes negative (reached the ground)
    tandis_que y >= 0:
         #Calculate the acceleration due to air resistance
        si air_resistance:
            air_resistance_acceleration = -0.5 * vy**2 #Simplified model for air resistance
        autre:
            air_resistance_acceleration = 0.0 #No air resistance

         #Calculate the new velocities using the kinematic equations
        vx += air_resistance_acceleration * math.cos(angle_rad) * time_interval
        vy += (-9.8 + air_resistance_acceleration * math.sin(angle_rad)) * time_interval

         #Calculate the new position using the kinematic equations
        x += vx * time_interval
        y += vy * time_interval

         #Increment the time
        time += time_interval

    retour x, y, time


 #Example usage
angle = 45 #Angle in degrees
side_lengths = 5
opposite_side_length = 3
side_ratio = 2
height = calculate_triangle_height(angle, side_lengths, opposite_side_length, side_ratio)
imprimer(f""The height of the triangle is: {height}"")

initial_velocity = 10 #m/s
time_interval = 0.01 #seconds
x, y, total_time = simulate_triangle_motion(initial_velocity, angle, time_interval, air_resistance=Vrai)
imprimer(f""The triangle reached the ground at coordinates (x={x:.2f}m, y={y:.2f}m) in {total_time:.2f}s."")","importateur mathématiques

définir Calculer_la_hauteur_du_triangle(angle, longueurs_latérales, Longueur_latérale_opposée, rapport_secondaire):
      # Convertir l'angle des degrés en radians
    rad = mathématiques.radians(angle)

      # Calculez la hauteur en utilisant la loi des sinus
    hauteur = Longueur_latérale_opposée * mathématiques.péché(rad) / rapport_secondaire

      # Calculez la longueur du côté adjacent en utilisant la loi des cosinus
    longueur_latérale_adjacente = mathématiques.sqrt(longueurs_latérales**2 + Longueur_latérale_opposée**2 - 2 * longueurs_latérales * Longueur_latérale_opposée * mathématiques.cos(rad))

      # Calculez l'hypoténuse du triangle
    hypoténuse = longueurs_latérales / mathématiques.cos(rad)

      # Calculez le côté restant à l'aide du théorème de Pythagore
    longueur_latérale_restante = mathématiques.sqrt(hypoténuse**2 - longueur_latérale_adjacente**2)

      # Calculez la hauteur finale du triangle
    hauteur += longueur_latérale_restante

    remettre_à_une_revers hauteur


définir Simuler_le_mouvement_du_triangle(vitesse_initiale, angle, intervalle_de_temps, résistance_à_l'air=Vrai):
      # Initialiser les variables
    x = 0.0
    y = 0.0
    temps = 0.0

      # Convertir l'angle des degrés en radians
    rad = mathématiques.radians(angle)

      # Calculer les vitesses initiales
    vx = vitesse_initiale * mathématiques.cos(rad)
    vy = vitesse_initiale * mathématiques.péché(rad)

      # Simuler le mouvement jusqu'à ce que la coordonnée y devienne négative (atteint le sol)
    tandis_que y >= 0:
          # Calculez l'accélération due à la résistance à l'air
        si résistance_à_l'air:
            accélération_de_la_résistance_à_l'air = -0.5 * vy**2 # Modèle simplifié pour la résistance à l'air
        auditeur:
            accélération_de_la_résistance_à_l'air = 0.0 # Pas de résistance à l'air

          # Calculez les nouvelles vitesses en utilisant les équations cinématiques
        vx += accélération_de_la_résistance_à_l'air * mathématiques.cos(rad) * intervalle_de_temps
        vy += (-9.8 + accélération_de_la_résistance_à_l'air * mathématiques.péché(rad)) * intervalle_de_temps

          # Calculez la nouvelle position à l'aide des équations cinématiques
        x += vx * intervalle_de_temps
        y += vy * intervalle_de_temps

          # Incrémenter le temps
        temps += intervalle_de_temps

    remettre_à_une_revers x, y, temps


  # Exemple d'utilisation
angle = 45 # Angle en degrés
longueurs_latérales = 5
Longueur_latérale_opposée = 3
rapport_secondaire = 2
hauteur = Calculer_la_hauteur_du_triangle(angle, longueurs_latérales, Longueur_latérale_opposée, rapport_secondaire)
imprimer(f""The height of the triangle is: {height}"")

vitesse_initiale = 10 # MS
intervalle_de_temps = 0.01 # secondes
x, y, temps_total = Simuler_le_mouvement_du_triangle(vitesse_initiale, angle, intervalle_de_temps, résistance_à_l'air=Vrai)
imprimer(f""The triangle reached the ground at coordinates (x={x:.2f}m, y={y:.2f}m) in {total_time:.2f}s."")"
"import math

def calculate_circle_area(radius):
    try:
        radius = float(radius)
        if radius <= 0:
            return ""Error: Radius must be a positive number""
        area = math.pi * radius**2
        return ""{:.2f}"".format(area)
    except ValueError:
        return ""Error: Invalid input. Radius must be a number""","importer math

définir calculate_circle_area(radius):
    essayer:
        radius = virgulem_flottante(radius)
        si radius <= 0:
            retour ""Error: Radius must be a positive number""
        area = math.pi * radius**2
        retour ""{:.2f}"".format(area)
    sauf Erreur_de_valeur:
        retour ""Error: Invalid input. Radius must be a number""","importateur mathématiques

définir Calculer_la_zone_du_cercle(rayon):
    rédacteur:
        rayon = Virgulem_Flottante(rayon)
      
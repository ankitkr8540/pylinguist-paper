Original Code,claude_partial_translated_code,claude_back_translated_code
"def reverse_matrix(matrix):
    new_matrix = []
    for i in range(len(matrix)):
        new_matrix.append([])
        for j in range(len(matrix[i])):
            new_matrix[i].insert(0, matrix[i][j])
    return new_matrix


# Test case 1
matrix1 = [[1, 2, 3],
           [4, 5, 6],
           [7, 8, 9]]
# Expected output: [[9, 8, 7], [6, 5, 4], [3, 2, 1]]
print(reverse_matrix(matrix1))

# Test case 2
matrix2 = [[1, 2, 3, 4],
           [5, 6, 7, 8]]
# Expected output: [[8, 7, 6, 5], [4, 3, 2, 1]]
print(reverse_matrix(matrix2))

# Test case 3
matrix3 = [[1, 2],
           [3, 4],
           [5, 6]]
# Expected output: [[6, 5], [4, 3], [2, 1]]
print(reverse_matrix(matrix3))","definir matriz_inversa(matriz):
    nueva_matriz = []
    for i in range(len(matriz)):
        nueva_matriz.append([])
        for j in range(len(matriz[i])):
            nueva_matriz[i].insert(0, matriz[i][j])
    return nueva_matriz

  #Caso de prueba 1
matriz1 = [[1, 2, 3],
           [4, 5, 6],
           [7, 8, 9]]
  #Salida esperada: [[9, 8, 7], [6, 5, 4], [3, 2, 1]]
print(matriz_inversa(matriz1))

  #Caso de prueba 2
matriz2 = [[1, 2, 3, 4],
           [5, 6, 7, 8]]
  #Salida esperada: [[8, 7, 6, 5], [4, 3, 2, 1]]
print(matriz_inversa(matriz2))

  #Caso de prueba 3
matriz3 = [[1, 2],
           [3, 4],
           [5, 6]]
  #Salida esperada: [[6, 5], [4, 3], [2, 1]]
print(matriz_inversa(matriz3))","definir inverse_matrix(matrix):
    new_matrix = []
    paraca i interno rango(longitud(matrix)):
        new_matrix.adjunto([])
        paraca j interno rango(longitud(matrix[i])):
            new_matrix[i].insertar(0, matrix[i][j])
    retornor new_matrix

  # Test case 1
matrix1 = [[1, 2, 3],
           [4, 5, 6],
           [7, 8, 9]]
  # Expected output: [[9, 8, 7], [6, 5, 4], [3, 2, 1]]
imprimir(inverse_matrix(matrix1))

  # Test case 2
matrix2 = [[1, 2, 3, 4],
           [5, 6, 7, 8]]
  # Expected output: [[8, 7, 6, 5], [4, 3, 2, 1]]
imprimir(inverse_matrix(matrix2))

  # Test case 3
matrix3 = [[1, 2],
           [3, 4],
           [5, 6]]
  # Expected output: [[6, 5], [4, 3], [2, 1]]
imprimir(inverse_matrix(matrix3))"
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

# Example usage
n = 10
fibonacci_number = fibonacci(n)
print(f""The Fibonacci number at index {n} is {fibonacci_number}."")","definir fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

 #Ejemplo de uso
n = 10
numero_fibonacci = fibonacci(n)
print(f""El número de Fibonacci en el índice {n} es {numero_fibonacci}."")","definir fibonacci(norte):
    si norte == 0:
        retornor 0
    Sino_Si norte == 1:
        retornor 1
    china:
        retornor fibonacci(norte-1) + fibonacci(norte-2)

 # Example usage
norte = 10
fibonacci_number = fibonacci(norte)
imprimir(F""The Fibonacci number at index {norte} is {fibonacci_number}."")"
"def count_unique_consonants(string):
    consonants = set()
    lowercase_string = string.lower()
    for char in lowercase_string:
        if char.isalpha() and char not in 'aeiou':
            consonants.add(char)
    return len(consonants)","definir contar_consonantes_unicas(str):
    consonantes = set()
    cadena_minuscula = str.lower()
    for caracter in cadena_minuscula:
        if caracter.es_alfabetico() and caracter not in 'aeiou':
            consonantes.add(caracter)
    return len(consonantes)","definir count_unique_consonants(string):
    consonants = Conjunto()
    lowercase_string = string.lower()
    paraca character interno lowercase_string:
        si character.is_alphabetic() Y character not in 'aeiou':
            consonants.add(character)
    retornor longitud(consonants)"
"def filter_and_replace(string):
    vowels = ['a', 'e', 'i', 'o', 'u']
    filtered_words = []
    
    words = string.split()
    
    for word in words:
        if any(char.isdigit() or not char.isalpha() for char in word):
            continue
        
        if len(word) > 3 and any(char in vowels for char in word):
            filtered_word = """"
            for char in word:
                if char in vowels:
                    vowel_index = vowels.index(char)
                    next_vowel = vowels[(vowel_index + 1) % len(vowels)]
                    filtered_word += next_vowel
                else:
                    filtered_word += char
            filtered_words.append(filtered_word)
    
    return "" "".join(filtered_words)


# Example usage:
input_string = ""Hello world! This is a test string. Filter me out if I contain numbers or special characters.""
output_string = filter_and_replace(input_string)
print(output_string)","definir filtrar_y_reemplazar(str):
    vocales = ['a', 'e', 'i', 'o', 'u']
    palabras_filtradas = []
    
    palabras = str.dividir()
    
    para palabra en palabras:
        si cualquier(caracter.es_dígito() o no caracter.es_alfabético() para caracter en palabra):
            continuar
        
        si longitud(palabra) > 3 y cualquier(caracter en vocales para caracter en palabra):
            palabra_filtrada = """"
            para caracter en palabra:
                si caracter en vocales:
                    indice_vocal = vocales.índice(caracter)
                    siguiente_vocal = vocales[(indice_vocal + 1) % longitud(vocales)]
                    palabra_filtrada += siguiente_vocal
                sino:
                    palabra_filtrada += caracter
            palabras_filtradas.adjuntar(palabra_filtrada)
    
    retornar "" "".unir(palabras_filtradas)


 #Ejemplo de uso:
cadena_entrada = ""Hello world! This is a test string. Filter me out if I contain numbers or special characters.""
cadena_salida = filtrar_y_reemplazar(cadena_entrada)
imprimir(cadena_salida)","definir filter_and_replace(string):
    vowels = ['a', 'e', 'i', 'o', 'u']
    filtered_words = []
    
    words = string.split()
    
    for word in words:
        if any(character.isdigit() or not character.isalpha() for character in word):
            continue
        
        if len(word) > 3 and any(character in vowels for character in word):
            filtered_word = """"
            for character in word:
                if character in vowels:
                    vowel_index = vowels.index(character)
                    next_vowel = vowels[(vowel_index + 1) % len(vowels)]
                    filtered_word += next_vowel
                else:
                    filtered_word += character
            filtered_words.append(filtered_word)
    
    return "" "".join(filtered_words)


# Example usage:
input_string = ""Hello world! This is a test string. Filter me out if I contain numbers or special characters.""
output_string = filter_and_replace(input_string)
print(output_string)"
"def isOddPrimeGreaterThan100(number):
    if number <= 100 or number % 2 == 0:  # Check if number is less than or equal to 100 or even
        return False
    for i in range(3, int(number**0.5) + 1, 2):  # Check divisibility by odd numbers only
        if number % i == 0:
            return False
    return True

def findSecondSmallestOddPrimeGreaterThan100(array):
    smallest = secondSmallest = float('inf')
    for number in array:
        if isOddPrimeGreaterThan100(number):
            if number < smallest:
                secondSmallest = smallest
                smallest = number
            elif number < secondSmallest:
                secondSmallest = number
    return secondSmallest","definir es_primo_impar_mayor_que_100(numero):
    if numero <= 100 or numero % 2 == 0: #Verificar si el número es menor o igual a 100 o par
        return False
    for i in range(3, entero(numero**0.5) + 1, 2): #Verificar divisibilidad solo por números impares
        if numero % i == 0:
            return False
    return True

definir encontrar_segundo_primo_impar_mas_pequeno_mayor_que_100(arreglo):
    mas_pequeno = segundo_mas_pequeno = punto_flotante('inf')
    for numero in arreglo:
        if es_primo_impar_mayor_que_100(numero):
            if numero < mas_pequeno:
                segundo_mas_pequeno = mas_pequeno
                mas_pequeno = numero
            elif numero < segundo_mas_pequeno:
                segundo_mas_pequeno = numero
    return segundo_mas_pequeno","definir es_primo_odd_greater_than_100(number):
    si number <= 100 O number % 2 == 0: #Check if the number is less than or equal to 100 or even
        retornor Falso
    paraca i interno rango(3, entero(number**0.5) + 1, 2): #Check divisibility only by odd numbers
        si number % i == 0:
            retornor Falso
    retornor Verdadero

definir find_second_smallest_odd_prime_greater_than_100(array):
    smallest = second_smallest = punto_flotante('inf')
    paraca number interno array:
        si es_primo_odd_greater_than_100(number):
            si number < smallest:
                second_smallest = smallest
                smallest = number
            Sino_Si number < second_smallest:
                second_smallest = number
    retornor second_smallest"
"class SeparatorNotFoundError(Exception):
    pass

class MultipleSeparatorsError(Exception):
    pass

try:
    mystring = ""Hello, World!""
    separator = ""#""

    # Incorrect way to split the string on a separator
    split_string = mystring.split(separator, 1)
    if not split_string:
        raise SeparatorNotFoundError(""Separator not found in string"")

    # Additional Requirement:
    # If the separator is found more than once in the string, raise a custom exception called ""MultipleSeparatorsError""

    # Incorrect way to split the string on a separator
    split_string = mystring.split(separator)
    if len(split_string) > 2:
        raise MultipleSeparatorsError(""Multiple separators found in string"")

except SeparatorNotFoundError as e:
    print(""Error:"", e)

except MultipleSeparatorsError as e:
    print(""Error:"", e)

except Exception as e:
    print(""Error:"", e)","class Error_Separador_No_Encontrado(Exception):
    pass

class Error_Multiples_Separadores(Exception):
    pass

try:
    mi_cadena = ""Hola, Mundo!""
    separador = ""#""

      #Forma incorrecta de dividir la cadena en un separador
    cadena_dividida = mi_cadena.split(separador, 1)
    if not cadena_dividida:
        raise Error_Separador_No_Encontrado(""Separador no encontrado en la cadena"")

      #Requisito adicional:
      #Si el separador se encuentra más de una vez en la cadena, elevar una excepción personalizada llamada ""Error_Multiples_Separadores""

      #Forma incorrecta de dividir la cadena en un separador
    cadena_dividida = mi_cadena.split(separador)
    if len(cadena_dividida) > 2:
        raise Error_Multiples_Separadores(""Se encontraron múltiples separadores en la cadena"")

except Error_Separador_No_Encontrado as e:
    print(""Error:"", e)

except Error_Multiples_Separadores as e:
    print(""Error:"", e)

except Exception as e:
    print(""Error:"", e)","clase Error_Separator_Not_Found(Excepción):
    pasar

clase Error_Multiple_Separators(Excepción):
    pasar

intentar:
    my_string = ""Hello, World!""
    separator = ""#""

      # Incorrect way to split the string by a separator
    split_string = my_string.split(separator, 1)
    si No split_string:
        elevar Error_Separator_Not_Found(""Separator not found in the string"")

      # Additional requirement:
      # If the separator is found more than once in the string, raise a custom exception called ""Error_Multiple_Separators""

      # Incorrect way to split the string by a separator
    split_string = my_string.split(separator)
    si longitud(split_string) > 2:
        elevar Error_Multiple_Separators(""Multiple separators found in the string"")

excepto Error_Separator_Not_Found como e:
    imprimir(""Error:"", e)

excepto Error_Multiple_Separators como e:
    imprimir(""Error:"", e)

excepto Excepción como e:
    imprimir(""Error:"", e)"
"def create_index_dictionary(list_one, list_two):
    if len(list_one) != len(list_two):
        raise ValueError(""Input lists must be of equal length"")
    
    index_dict = {}
    for i in range(len(list_one)):
        if isinstance(list_one[i], (list, dict, tuple)) and isinstance(list_two[i], (list, dict, tuple)):
            if isinstance(list_one[i], set) or isinstance(list_two[i], set):
                raise ValueError(""Input lists cannot contain sets"")
            
            nested_dict = {}
            if isinstance(list_one[i], dict) and isinstance(list_two[i], dict):
                if len(list_one[i]) != len(list_two[i]):
                    raise ValueError(""Nested dictionaries must have the same number of elements"")
                
                for key in list_one[i].keys():
                    if key not in list_two[i]:
                        raise ValueError(""Keys in nested dictionaries must be the same"")
                    nested_dict[key] = (list_one[i][key], list_two[i][key])
            elif isinstance(list_one[i], list) and isinstance(list_two[i], list):
                if len(list_one[i]) != len(list_two[i]):
                    raise ValueError(""Nested lists must have the same length"")
                
                for j in range(len(list_one[i])):
                    nested_dict[j] = (list_one[i][j], list_two[i][j])
            elif isinstance(list_one[i], tuple) and isinstance(list_two[i], tuple):
                if len(list_one[i]) != len(list_two[i]):
                    raise ValueError(""Tuples must have the same length"")
                
                for j in range(len(list_one[i])):
                    nested_dict[j] = (list_one[i][j], list_two[i][j])
            
            index_dict[i] = nested_dict
        else:
            index_dict[i] = (list_one[i], list_two[i])
    
    return index_dict","definir crear_diccionario_indice(lista_uno, lista_dos):
    if len(lista_uno) != len(lista_dos):
        raise Error de valor(""Las listas de entrada deben tener igual longitud"")
    
    diccionario_indice = {}
    for i in range(len(lista_uno)):
        if isinstance(lista_uno[i], (list, dict, tuple)) and isinstance(lista_dos[i], (list, dict, tuple)):
            if isinstance(lista_uno[i], set) or isinstance(lista_dos[i], set):
                raise Error de valor(""Las listas de entrada no pueden contener conjuntos"")
            
            diccionario_anidado = {}
            if isinstance(lista_uno[i], dict) and isinstance(lista_dos[i], dict):
                if len(lista_uno[i]) != len(lista_dos[i]):
                    raise Error de valor(""Los diccionarios anidados deben tener el mismo número de elementos"")
                
                for clave in lista_uno[i].keys():
                    if clave not in lista_dos[i]:
                        raise Error de valor(""Las claves en los diccionarios anidados deben ser iguales"")
                    diccionario_anidado[clave] = (lista_uno[i][clave], lista_dos[i][clave])
            elif isinstance(lista_uno[i], list) and isinstance(lista_dos[i], list):
                if len(lista_uno[i]) != len(lista_dos[i]):
                    raise Error de valor(""Las listas anidadas deben tener la misma longitud"")
                
                for j in range(len(lista_uno[i])):
                    diccionario_anidado[j] = (lista_uno[i][j], lista_dos[i][j])
            elif isinstance(lista_uno[i], tuple) and isinstance(lista_dos[i], tuple):
                if len(lista_uno[i]) != len(lista_dos[i]):
                    raise Error de valor(""Las tuplas deben tener la misma longitud"")
                
                for j in range(len(lista_uno[i])):
                    diccionario_anidado[j] = (lista_uno[i][j], lista_dos[i][j])
            
            diccionario_indice[i] = diccionario_anidado
        else:
            diccionario_indice[i] = (lista_uno[i], lista_dos[i])
    
    return diccionario_indice","definir create_index_dictionary(list_one, list_two):
    si longitud(list_one) != longitud(list_two):
        levantar Error_de_valor(""Input lists must have equal length"")
    
    index_dictionary = {}
    paraca i interno rango(longitud(list_one)):
        si ES_Instancia(list_one[i], (lista, diccionario, tupla)) Y ES_Instancia(list_two[i], (lista, diccionario, tupla)):
            si ES_Instancia(list_one[i], conjunto) O ES_Instancia(list_two[i], conjunto):
                levantar Error_de_valor(""Input lists cannot contain sets"")
            
            nested_dictionary = {}
            si ES_Instancia(list_one[i], diccionario) Y ES_Instancia(list_two[i], diccionario):
                si longitud(list_one[i]) != longitud(list_two[i]):
                    levantar Error_de_valor(""Nested dictionaries must have the same number of elements"")
                
                paraca clave interno list_one[i].claves():
                    si clave No interno list_two[i]:
                        levantar Error_de_valor(""Keys in nested dictionaries must be equal"")
                    nested_dictionary[clave] = (list_one[i][clave], list_two[i][clave])
            Sino_Si ES_Instancia(list_one[i], lista) Y ES_Instancia(list_two[i], lista):
                si longitud(list_one[i]) != longitud(list_two[i]):
                    levantar Error_de_valor(""Nested lists must have the same length"")
                
                paraca j interno rango(longitud(list_one[i])):
                    nested_dictionary[j] = (list_one[i][j], list_two[i][j])
            Sino_Si ES_Instancia(list_one[i], tupla) Y ES_Instancia(list_two[i], tupla):
                si longitud(list_one[i]) != longitud(list_two[i]):
                    levantar Error_de_valor(""Tuples must have the same length"")
                
                paraca j interno rango(longitud(list_one[i])):
                    nested_dictionary[j] = (list_one[i][j], list_two[i][j])
            
            index_dictionary[i] = nested_dictionary
        china:
            index_dictionary[i] = (list_one[i], list_two[i])
    
    retornor index_dictionary"
"def find_maximum(a, b, c):
    # Convert the numbers to binary
    a_bin = bin(a)
    b_bin = bin(b)
    c_bin = bin(c)
    
    # Count the number of 1s in the binary representation of each number
    a_count = a_bin.count('1')
    b_count = b_bin.count('1')
    c_count = c_bin.count('1')
    
    # Compare the counts to find the maximum
    if a_count > b_count and a_count > c_count:
        return a
    elif b_count > a_count and b_count > c_count:
        return b
    else:
        return c","definir encontrar_maximo(a, b, c):
     #Convertir los números a binario
    a_bin = bin(a)
    b_bin = bin(b)
    c_bin = bin(c)
    
     #Contar el número de 1s en la representación binaria de cada número
    a_count = a_bin.count('1')
    b_count = b_bin.count('1')
    c_count = c_bin.count('1')
    
     #Comparar los conteos para encontrar el máximo
    if a_count > b_count and a_count > c_count:
        return a
    elif b_count > a_count and b_count > c_count:
        return b
    else:
        return c","definir find_maximum(a, b, c):
     # Convert numbers to binary
    a_bin = bin(a)
    b_bin = bin(b)
    c_bin = bin(c)
    
     # Count number of 1s in binary representation of each number
    a_count = a_bin.count('1')
    b_count = b_bin.count('1')
    c_count = c_bin.count('1')
    
     # Compare counts to find maximum
    si a_count > b_count Y a_count > c_count:
        retornor a
    Sino_Si b_count > a_count Y b_count > c_count:
        retornor b
    china:
        retornor c"
"def quick_sort(arr):
    if len(arr) <= 1:
        return arr, 0
    else:
        pivot = arr[0]
        less = [x for x in arr[1:] if x <= pivot]
        greater = [x for x in arr[1:] if x > pivot]
        sorted_less, comparisons_less = quick_sort(less)
        sorted_greater, comparisons_greater = quick_sort(greater)
        comparisons = len(arr) - 1 + comparisons_less + comparisons_greater
        sorted_arr = sorted_greater + [pivot] + sorted_less
        return sorted_arr, comparisons

# Testing the code
arr = [5, 3, 9, 5, 2, 8, 4]
sorted_arr, comparisons = quick_sort(arr)
print(""Sorted Array:"", sorted_arr)
print(""Number of Comparisons:"", comparisons)","definir ordenamiento_rapido(arreglo):
    if len(arreglo) <= 1:
        return arreglo, 0
    else:
        pivote = arreglo[0]
        menores = [x for x in arreglo[1:] if x <= pivote]
        mayores = [x for x in arreglo[1:] if x > pivote]
        ordenados_menores, comparaciones_menores = ordenamiento_rapido(menores)
        ordenados_mayores, comparaciones_mayores = ordenamiento_rapido(mayores)
        comparaciones = len(arreglo) - 1 + comparaciones_menores + comparaciones_mayores
        arreglo_ordenado = ordenados_mayores + [pivote] + ordenados_menores
        return arreglo_ordenado, comparaciones

  #Probando el código
arreglo = [5, 3, 9, 5, 2, 8, 4]
arreglo_ordenado, comparaciones = ordenamiento_rapido(arreglo)
print(""Arreglo Ordenado:"", arreglo_ordenado)
print(""Número de Comparaciones:"", comparaciones)","definir quick_sort(array):
    si longitud(array) <= 1:
        retornor array, 0
    china:
        pivot = array[0]
        smaller = [x for x in array[1:] if x <= pivot]
        larger = [x for x in array[1:] if x > pivot]
        sorted_smaller, comparisons_smaller = quick_sort(smaller)
        sorted_larger, comparisons_larger = quick_sort(larger)
        comparisons = longitud(array) - 1 + comparisons_smaller + comparisons_larger
        sorted_array = sorted_larger + [pivot] + sorted_smaller
        retornor sorted_array, comparisons

  # Testing the code
array = [5, 3, 9, 5, 2, 8, 4]
sorted_array, comparisons = quick_sort(array)
imprimir(""Sorted Array:"", sorted_array)
imprimir(""Number of Comparisons:"", comparisons)"
"def calculate_distance(point1, point2):
    distance = ((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2 + (point2[2] - point1[2])**2) ** 0.5
    return distance","definir calcular_distancia(punto1, punto2):
    distancia = ((punto2[0] - punto1[0])**2 + (punto2[1] - punto1[1])**2 + (punto2[2] - punto1[2])**2) ** 0.5
    retornar distancia","definir calculate_distance(point1, point2):
    distance = ((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2 + (point2[2] - point1[2])**2) ** 0.5
    return distance"
